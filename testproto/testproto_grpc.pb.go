// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestStreamFieldMask(ctx context.Context, in *FakeFieldMaskRequest, opts ...grpc.CallOption) (TestService_TestStreamFieldMaskClient, error)
	TestStreamNoFieldMask(ctx context.Context, in *NoFieldMaskRequest, opts ...grpc.CallOption) (TestService_TestStreamNoFieldMaskClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestStreamFieldMask(ctx context.Context, in *FakeFieldMaskRequest, opts ...grpc.CallOption) (TestService_TestStreamFieldMaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/protofm.test.TestService/TestStreamFieldMask", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamFieldMaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamFieldMaskClient interface {
	Recv() (*SimpleObject, error)
	grpc.ClientStream
}

type testServiceTestStreamFieldMaskClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamFieldMaskClient) Recv() (*SimpleObject, error) {
	m := new(SimpleObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestStreamNoFieldMask(ctx context.Context, in *NoFieldMaskRequest, opts ...grpc.CallOption) (TestService_TestStreamNoFieldMaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], "/protofm.test.TestService/TestStreamNoFieldMask", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamNoFieldMaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamNoFieldMaskClient interface {
	Recv() (*SimpleObject, error)
	grpc.ClientStream
}

type testServiceTestStreamNoFieldMaskClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamNoFieldMaskClient) Recv() (*SimpleObject, error) {
	m := new(SimpleObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	TestStreamFieldMask(*FakeFieldMaskRequest, TestService_TestStreamFieldMaskServer) error
	TestStreamNoFieldMask(*NoFieldMaskRequest, TestService_TestStreamNoFieldMaskServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) TestStreamFieldMask(*FakeFieldMaskRequest, TestService_TestStreamFieldMaskServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamFieldMask not implemented")
}
func (UnimplementedTestServiceServer) TestStreamNoFieldMask(*NoFieldMaskRequest, TestService_TestStreamNoFieldMaskServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamNoFieldMask not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestStreamFieldMask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FakeFieldMaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStreamFieldMask(m, &testServiceTestStreamFieldMaskServer{stream})
}

type TestService_TestStreamFieldMaskServer interface {
	Send(*SimpleObject) error
	grpc.ServerStream
}

type testServiceTestStreamFieldMaskServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamFieldMaskServer) Send(m *SimpleObject) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestStreamNoFieldMask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoFieldMaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStreamNoFieldMask(m, &testServiceTestStreamNoFieldMaskServer{stream})
}

type TestService_TestStreamNoFieldMaskServer interface {
	Send(*SimpleObject) error
	grpc.ServerStream
}

type testServiceTestStreamNoFieldMaskServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamNoFieldMaskServer) Send(m *SimpleObject) error {
	return x.ServerStream.SendMsg(m)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofm.test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStreamFieldMask",
			Handler:       _TestService_TestStreamFieldMask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestStreamNoFieldMask",
			Handler:       _TestService_TestStreamNoFieldMask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testproto/testproto.proto",
}
